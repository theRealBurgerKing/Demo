import type { DefinedQueryObserverResult, DistributiveOmit, OmitKeyof, QueryKey } from '@tanstack/query-core';
import type { UseQueryOptions } from './types';
export declare type UseSuspenseQueryResult<TData = unknown, TError = unknown> = DistributiveOmit<DefinedQueryObserverResult<TData, TError>, 'isPlaceholderData'>;
export declare type UseSuspenseQueryOptions<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = OmitKeyof<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'enabled' | 'useErrorBoundary' | 'suspense' | 'placeholderData' | 'networkMode' | 'onSuccess' | 'onError' | 'onSettled' | 'getPreviousPageParam' | 'getNextPageParam'>;
export declare function useSuspenseQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>): UseSuspenseQueryResult<TData, TError>;
//# sourceMappingURL=useSuspenseQuery.d.ts.map